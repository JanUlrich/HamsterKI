/*class*//**
 * HamsterWegfindung berechnet die Energieaufwände für einen Hamster um
 * auf die einzelnen Felder des Spielfelds zu gelangen. Die Werte können für weitere AI-Operationen verwendet werden.
 */
public class HamsterWegfindung {
    Karte karte;
    Spielfeld spielfeld;
    MeinHamster hamster;
    
    /**
     * @param hamster - Die Ausgangslage des Hamsters. Dabei ist nur die Position und die Richtung des Hamsters relevant.
     * @param felder - Das Spielfeld. Hier sind alle bisher bekannten Informationen gespeichert.
     */
    public HamsterWegfindung(MeinHamster hamster, Karte karte){
    	this.karte = karte;
    	this.hamster = hamster;
    }

	public int getBestMove(){
		Position ausgangsPosition = hamster.getPosition();
		
		int bestDirection = -1;
		double bestChance = -1;
		for(int direction = 0; direction < 4; direction++) {
			Feld f = karte.getFeldInRichtung(ausgangsPosition, direction);
			if(f.getMauer()==1) continue;
			
			double chance = f.getKornChance();
			if(chance>bestDirection) {// || (chance>=bestDirection && direction==ausgangsPosition.direction)) {
				bestDirection = direction;
				bestChance = chance;
			}
		}
		
	    System.out.println("" + bestDirection + ": " + bestChance);
		
		return bestDirection;
	}
	
	private int berechneKornChancen(){
		int totalChance = 0;
		for(int x=0;x<spielfeld.anzahlSpalten;x++) {
			for(int y=0;y<spielfeld.anzahlReihen;y++){
				Position pos = new Position(x,y);
				totalChance += spielfeld.getKornChance(pos) / spielfeld.getEnergieAufwand(pos);
			}
		}
		return totalChance;
	}
	
	/**
	 * Berechnet die Energieaufwände für den Hamster 'initialHamster' um auf die einzelnen Felder des Spielfelds zu gelangen.
	 */
	private void berechneEntfernungen(Position fromPos){
		doStepfrom(fromPos);
	}
	
	private void doStepfrom(Position pos){
		/*
		Probiere alle Richtungen durch. Falls ein Feld gefunden wird,
		auf dem der hamster noch nicht in entsprechender Richtung war oder hier ein neuer bester Energiewe
		*/
		int momentaneEnergie = spielfeld.getEnergieAufwand(pos);
		for(int direction = 0; direction<4;direction++){
			int benoetigteEnergie = 2;

	    	// Schaut der Hamster schon in entsprechende Richtung, 
	    	// braucht er sich nicht mehr drehen
			if(pos.direction == direction)
				benoetigteEnergie = 1;
			
			if(spielfeld.istBessererEnergiewert(pos.getPositionInRichtung(direction), momentaneEnergie + benoetigteEnergie)){
				spielfeld.setEnergieAufwand(pos.getPositionInRichtung(direction), momentaneEnergie + benoetigteEnergie);
				doStepfrom(pos.getPositionInRichtung(direction)); // 
			}
		}
	}
}
 
