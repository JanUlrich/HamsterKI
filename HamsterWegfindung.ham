/*class*//**
 * HamsterWegfindung berechnet die Energieaufwände für einen Hamster um
 * auf die einzelnen Felder des Spielfelds zu gelangen. Die Werte können für weitere AI-Operationen verwendet werden.
 */
import java.util.ArrayList;

public class HamsterWegfindung extends Wegfindung {
	public int getEnergieAufwand(int richtung, int blickRichtung) {
		// energieaufwand ist random Value zwischen 1 und 3. Das verhindert Deadlocks!
		//+ new Double(Math.random() * 2).intValue();

		int energieaufwand = 1;
		if(richtung != blickRichtung)
			energieaufwand+=1;
		if(Math.abs(richtung - blickRichtung)==2)
			energieaufwand+=1;
		return energieaufwand;
	}

	public int getBestMove(){
		Position position = hamster.getPosition();

		int bestDirection = -1;
		double bestChance = -1;
		for(int direction = 0; direction < 4; direction++) {
			Position ziel = position.getPositionInRichtung(direction);
			if(karte.getMauer(ziel)==1)
				continue;

			int initialEnergieaufwand = getEnergieAufwand(direction, position.direction);
			double chance = berechneKornChancen(ziel, initialEnergieaufwand);

			// Besseren Weg wählen
			//  || (chance==bestChance && direction==position.direction)
			if(bestDirection==-1 || chance>bestChance) {
				bestDirection = direction;
				bestChance = chance;
			}
		}

		return bestDirection;
	}

	/**
	 * Diese Funktion berechnet für alle Felder die Chance auf Körner
	 * sowie den Energieaufwand um zu diesem Feld zu gelangen.
	 */
	private double berechneKornChancen(Position fromPosition, int initialEnergieaufwand){
		//Spielfeld-Entfernungen von fromPosition berechnen:
		doStepfrom(fromPosition, initialEnergieaufwand);

		double totalChance = 0;
		for(int x=karte.getMinX();x<=karte.getMaxX();x++) {
			for(int y=karte.getMinY();y<=karte.getMaxY();y++){
				Position pos = new Position(x,y,0);
				int energieAufwand = karte.getEnergieAufwand(pos);
				for(int richtung = 1; richtung < 4; richtung++){
					pos.direction = richtung;
					if(karte.getEnergieAufwand(pos)<energieAufwand && karte.getEnergieAufwand(pos)>0)energieAufwand = karte.getEnergieAufwand(pos);
				}

				if(energieAufwand > 0)
					totalChance += karte.getKornChance(pos) / new Double(energieAufwand);

				Log.write(""+karte.getKornChance(pos) + " / " + karte.getEnergieAufwand(pos) +" = " +totalChance);
			}
		}
		return totalChance;
	}

	/**
	 * Probiere alle Richtungen durch. Falls ein Feld gefunden wird,
	 * auf dem der hamster noch nicht in entsprechender Richtung war oder hier ein neuer bester Energiewe
	 */
	private void doStepfrom(Position pos, int initialEnergieaufwand){
		ArrayList<Position> steps = new ArrayList<Position>();
		steps.add(pos.clone());

		karte.resetEnergieaufwand();
		karte.setEnergieAufwand(pos, initialEnergieaufwand);

		while(!steps.isEmpty()){
			pos = steps.get(0);
			steps.remove(0);
			int momentaneEnergie = karte.getEnergieAufwand(pos);
            for(int direction = 0; direction<4; direction++){
				int benoetigteEnergie = getEnergieAufwand(direction, pos.direction);

				Position nextPosition = pos.getPositionInRichtung(direction);
                if(    nextPosition.x > karte.getMaxX() || nextPosition.y > karte.getMaxY()
                    || nextPosition.x < karte.getMinX() || nextPosition.y < karte.getMinY()
                    || karte.getMauer(nextPosition)==1)
					continue;

				Position drehPosition = nextPosition.clone();
				for(int drehRichtung = 0; drehRichtung < 4; drehRichtung++){
					int drehEnergie = getEnergieAufwand(drehRichtung, pos.direction) - 1;
					drehPosition.direction = drehRichtung;
					if(karte.istBessererEnergiewert(drehPosition, momentaneEnergie + benoetigteEnergie + drehEnergie)){
						karte.setEnergieAufwand(drehPosition, momentaneEnergie + benoetigteEnergie + drehEnergie );
						steps.add(drehPosition); // nächster Step
					}
				}
			}
		}
	}
}

