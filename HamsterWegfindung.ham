/*class*//**
 * HamsterWegfindung berechnet die Energieaufwände für einen Hamster um
 * auf die einzelnen Felder des Spielfelds zu gelangen. Die Werte können für weitere AI-Operationen verwendet werden.
 */
public class HamsterWegfindung {
    Karte karte;
    MeinHamster hamster;

    /**
     * @param hamster - Die Ausgangslage des Hamsters. Dabei ist nur die Position und die Richtung des Hamsters relevant.
     * @param karte - Das Spielfeld. Hier sind alle bisher bekannten Informationen gespeichert.
     */
    public HamsterWegfindung(MeinHamster hamster, Karte karte){
    	this.karte = karte;
    	this.hamster = hamster;
    }

	public int getBestMove(){
		Position ausgangsPosition = hamster.getPosition();
		//hamster.schreib(ausgangsPosition.toString()+" "+spielfeld.anfangsX);
		//ausgangsPosition.x -= spielfeld.anfangsX;
		//ausgangsPosition.y -= spielfeld.anfangsY;

		int bestDirection = -1;
		double bestChance = -1;
		for(int direction = 0; direction < 4; direction++) {
			Position ziel = ausgangsPosition.getPositionInRichtung(direction);
			//			Feld f = karte.getFeld(ziel);
			if(karte.getMauer(ziel)!=1){
				//double chance = f.getKornChance();
				return direction;
				/*
				double chance = berechneKornChancen(ziel);
				if(chance>bestDirection || (chance>=bestDirection && direction==ausgangsPosition.direction)) {
					bestDirection = direction;
					bestChance = chance;
				}
			*/
			}
		}

	   // hamster.schreib("" + bestDirection + ": " + bestChance);

		return bestDirection;
	}

	/**
	 * Diese Funktion berechnet die Chance auf Körner / den Energieaufwand für Hamster um zu diesem Feld zu gelangen und dies für alle Felder.
	 */
	private double berechneKornChancen(Position fromPosition){
		//Spielfeld-Entfernungen von fromPosition berechnen:
		berechneEntfernungen(fromPosition);

		double totalChance = 0;
		for(int x=karte.getMinX();x<karte.getMaxX();x++) {
			for(int y=karte.getMinY();y<karte.getMaxY();y++){
				Position pos = new Position(x,y);
				int energieAufwand = karte.getEnergieAufwand(pos);
				if(energieAufwand > 0)
					totalChance += karte.getKornChance(pos) / new Double(energieAufwand);
				//hamster.schreib(""+karte.getKornChance(pos) + " / " + karte.getEnergieAufwand(pos) +" = " +totalChance);
			}
		}
		return totalChance;
	}

	/**
	 * Berechnet die Energieaufwände für den Hamster 'initialHamster' um auf die einzelnen Felder des Spielfelds zu gelangen.
	 */
	private void berechneEntfernungen(Position fromPos){
		doStepfrom(fromPos);
		//hamster.schreib(""+ spielfeld +""); //DEBUG
	}

	private void doStepfrom(Position pos){
		/*
		Probiere alle Richtungen durch. Falls ein Feld gefunden wird,
		auf dem der hamster noch nicht in entsprechender Richtung war oder hier ein neuer bester Energiewe
		*/
		if(	   pos.x > karte.getMaxX() || pos.y > karte.getMaxY()
			|| pos.x < karte.getMinX() || pos.y < karte.getMinY())
			return;
		int momentaneEnergie = karte.getEnergieAufwand(pos);
		for(int direction = 0; direction<4;direction++){
			int benoetigteEnergie = 2;

	    	// Schaut der Hamster schon in entsprechende Richtung,
	    	// braucht er sich nicht mehr drehen
			if(pos.direction == direction)
				benoetigteEnergie = 1;

			Position nextPosition = pos.getPositionInRichtung(direction);
			Position drehPosition = nextPosition.clone();
			for(int drehRichtung = 0; drehRichtung < 4; drehRichtung++){
				if(drehRichtung!=pos.direction){
					drehPosition.direction = drehRichtung;
					if(karte.istBessererEnergiewert(drehPosition, momentaneEnergie + benoetigteEnergie + 1)){
						karte.setEnergieAufwand(drehPosition, momentaneEnergie + benoetigteEnergie + 1 );
						doStepfrom(drehPosition); // nächster Step
					}
				}else{
					if(karte.istBessererEnergiewert(nextPosition, momentaneEnergie + benoetigteEnergie)){
						karte.setEnergieAufwand(nextPosition, momentaneEnergie + benoetigteEnergie);
						doStepfrom(nextPosition); // nächster Step
					}
				}
			}
		}
	}
}

