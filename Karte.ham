/*class*/import java.util.HashMap;
/**
 * Die Karte stellt ein Spielfeld mit Variabler Größe dar.
 * Die Felder der Karte können Editiert werden.
 * Quasi die Karte die der Hamster (die AI das Hamsters) dabei hat und alle aufgedeckten Felder darauf vermerkt.
 * Bemerkung:
 * wird auf ein Feld zugegriffen, welches noch nicht erkundet ist, so wird die FeldNichtErkundetException geworfen
 */
public class Karte {
	private HashMap<String,Feld> felder = new HashMap<String,Feld>();

	private int minY = 0;
	private int maxY = 0;
	private int minX = 0;
	private int maxX = 0;

	public Karte() {
	}

	/**
	 * Gibt ein Feld mit den bisher auf diesem Feld eingetragenen Informationen zurück.
	 * Dieses kann anschließend editiert werden.
	 * @return - Das Feld an der Stelle y,x / Wenn kein Feld vorhanden, dann wird FeldNichtErkundetException geworfen.
	 */
	public Feld getFeld(Position pos){
		feldZugriff(pos);
		String key = generateHashValue(pos);
		if(felder.containsKey(key)) {
			return felder.get(key);
		}

		// Standardfeld zurückgeben
		return new Feld(0.0,0.50);
	}

	private void setFeld(Position pos, Feld feld) {
		feldZugriff(pos);
		String key = generateHashValue(pos);
		felder.put(key, feld);
	}



	/**
	 * @return True, falls sich bereits ein Feld an Stelle y, x befindet - ansonsten false
	 */
	public boolean feldBelegt(Position pos){
		String key = generateHashValue(pos);
		return felder.containsKey(key);
	}

    public int getEnergieAufwand(Position pos){
	    Feld f = getFeld(pos);
    	return f.getEnergieaufwand(pos.direction);
    }

	public void setEnergieAufwand(Position pos, int energieAufwand) {
		Feld feld = getFeld(pos);
		feld.setEnergieaufwand(pos.direction,energieAufwand);
	}

    public double getKornChance(Position pos){
	    Feld f = getFeld(pos);
    	return f.getKoerner();
    }

	public void setKornChance(Position pos, double kornChance){
		Feld f = getFeld(pos);
		f.setKoerner(kornChance);
		setFeld(pos, f);
	}

	public double getMauer(Position pos){
		Feld feld = getFeld(pos);
		return feld.getMauer();
	}

	public void setMauer(Position pos, double mauerWahrscheinlichkeit){
		Feld f = getFeld(pos);
		f.setMauer(mauerWahrscheinlichkeit);
		setFeld(pos, f);
	}

	/**
     * Wichtige Funktion für Wegberechnung.
     * prüft ob der übergebene Energiewert an der übergebenene Position auf dem Spielfeld einen besseren Wert als der bereits vorhandene darstellt.
     * Wichtig: ist das Spielfeld an der Position pos nicht begehbar, wird false zurückgegeben. Nicht begehbare Felder haben keinen Energiewert.
     * Wenn an der übergebenen Position noch kein Energiewert vorhanden ist, dann wird true zurückgegeben.
     */
    public boolean istBessererEnergiewert(Position pos, int energie){
    	int energieaufwand=getEnergieAufwand(pos);
    	if(energieaufwand == 0)
    		return true;
    	return energieaufwand>energie;
    }

    /**
     * Gibt das Feld in der angegebenen Richtung zurück
     * @return Das Feld in der angegebenen Richtung
	*/
    public Feld getFeldInRichtung(Position position, int richtung) {
    	return getFeld(position.getPositionInRichtung(richtung));
    }

	/**
	 * Bei einem Zugriff auf ein Feld sollte diese Funktion aufgerufen werden.
	 * Wird benötigt um wichtige Variablen für die createSpielfeld-Methode zu setzen.
	 */
	private void feldZugriff(Position pos){
		if(pos.y<minY)	minY=pos.y;
		if(pos.y>maxY)	maxY=pos.y;
		if(pos.x<minX)	minX=pos.x;
		if(pos.x>maxX)	maxX=pos.x;
	}

	private String generateHashValue(Position pos){
		return "" + pos.y + "," + pos.x;
	}

    @Override
    public String toString(){
    	return toString(null);
    }

    public String toString(Position hamsterPosition){
    	String ret = "Karte:\n";
    	for(int y=minY;y<=maxY;y++){
    		for(int x=minX;x<=maxX;x++){
    			Feld f = getFeld(new Position(x,y));
    			if(hamsterPosition!=null && x==hamsterPosition.x && y==hamsterPosition.y) {
    				ret += "h";
    			} else {
    				//ret += f.getKornChance() + "|";
    				ret += ((f==null) ? "?" : (f.getMauer() >= 1) ? "x" : "_");
    			}
    		}
    		ret += "\n";
    	}
    	return ret;
    }

	public int getMinX(){
		return minX;
	}

	public int getMaxX(){
		return maxX;
	}

	public int getMinY(){
		return minY;
	}

	public int getMaxY(){
		return maxY;
	}
}
