/*class*/
import java.util.HashMap;
/**
 * Die Karte stellt ein Spielfeld mit Variabler Größe dar.
 * Die Felder der Karte können Editiert werden.
 * Quasi die Karte die der Hamster (die AI das Hamsters) dabei hat und alle aufgedeckten Felder darauf vermerkt.
 * Bemerkung:
 * wird auf ein Feld zugegriffen, welches noch nicht erkundet ist, so wird die FeldNichtErkundetException geworfen
 * @author Jan Bader, Andreas Stadelmeier
 */
public class Karte {
	private HashMap<String,Feld> felder = new HashMap<String,Feld>();

	private int minY = 0;
	private int maxY = 0;
	private int minX = 0;
	private int maxX = 0;

	/**
	 * Gibt ein Feld mit den bisher auf diesem Feld eingetragenen Informationen zurück.
	 * Dieses kann anschließend editiert werden.
	 * @return - Das Feld an der Stelle y,x / Wenn kein Feld vorhanden, dann wird ein Standardfeld generiert.
	 */
	private Feld getFeld(Position pos){
		return getFeld(pos, true);
	}

	/**
	 * Gibt ein Feld mit den bisher auf diesem Feld eingetragenen Informationen zurück.
	 * Dieses kann anschließend editiert werden.
	 * @return - Das Feld an der Stelle y,x / Wenn kein Feld vorhanden, dann wird ein Standardfeld generiert.
	 */
	private Feld getFeld(Position pos, boolean save){
		String key = generateHashValue(pos);
		if(feldBelegt(pos)) {
			feldZugriff(pos);
			return felder.get(key);
		}
		//if(pos.x>maxX || pos.y>maxY || pos.x<minX || pos.y<minY){
		//	throw new RuntimeException("Zugriff auf Kartenelement out of bounds: "+pos);
		//}
		feldZugriff(pos);
		//Standardfeld generieren:
		Feld feld = new Feld(0.0,0.50);

		if(save)
			setFeld(pos, feld); // und der Karte anfügen.

		// Standardfeld zurückgeben
		return feld;
	}

	/**
	 * Setzt das Feld an der gegebenen Position
	 */
	private void setFeld(Position pos, Feld feld) {
		feldZugriff(pos);
		String key = generateHashValue(pos);
		felder.put(key, feld);
	}

	/**
	* Setzt den Energieaufwand aller Felder auf der karte auf 0 zurück.
	*/
	public void resetEnergieaufwand(){
		for(Feld feld : felder.values()){
			for(int i=0;i<4;i++){
				feld.setEnergieaufwand(i,0);
			}
		}
	}

	/**
	 * @return True, falls sich bereits ein Feld an Stelle y, x befindet - ansonsten false
	 */
	public boolean feldBelegt(Position pos){
		String key = generateHashValue(pos);
		return felder.containsKey(key);
	}

    public int getEnergieAufwand(Position pos){
	    Feld f = getFeld(pos, false);
    	return f.getEnergieaufwand(pos.direction);
    }

	public void setEnergieAufwand(Position pos, int energieAufwand) {
		Feld feld = getFeld(pos);
		feld.setEnergieaufwand(pos.direction,energieAufwand);
	}

    public double getKornChance(Position pos){
	    Feld f = getFeld(pos, false);
    	return f.getKornChance();
    }

	public void setKornChance(Position pos, double kornChance){
		Feld f = getFeld(pos);
		f.setKoerner(kornChance);
	}

	public double getMauer(Position pos){
		Feld feld = getFeld(pos, false);
		return feld.getMauer();
	}

	public void setMauer(Position pos, double mauerWahrscheinlichkeit){
		Feld f = getFeld(pos);
		f.setMauer(mauerWahrscheinlichkeit);
	}

	/**
     * Wichtige Funktion für Wegberechnung.
     * prüft ob der übergebene Energiewert an der übergebenene Position auf dem Spielfeld einen besseren Wert als der bereits vorhandene darstellt.
     * Wichtig: ist das Spielfeld an der Position pos nicht begehbar, wird false zurückgegeben. Nicht begehbare Felder haben keinen Energiewert.
     * Wenn an der übergebenen Position noch kein Energiewert vorhanden ist, dann wird true zurückgegeben.
     */
    public boolean istBessererEnergiewert(Position pos, int energie){
    	int energieaufwand=getEnergieAufwand(pos);
    	//debug:
    	//Hamster.getStandardHamster().schreib(pos.toString()+" -> "+energie+", "+energieaufwand+"="+(energieaufwand>energie));
    	if(energieaufwand == 0)
    		return true;
    	return energieaufwand>energie;
    }

    /**
     * Gibt das Feld in der angegebenen Richtung zurück
     * @return Das Feld in der angegebenen Richtung
	*/
    public Feld getFeldInRichtung(Position position, int richtung) {
    	return getFeld(position.getPositionInRichtung(richtung));
    }

	/**
	 * Bei einem Zugriff auf ein Feld sollte diese Funktion aufgerufen werden.
	 * Wird benötigt um wichtige Variablen für die createSpielfeld-Methode zu setzen.
	 */
	private void feldZugriff(Position pos){
		if(pos.y<minY)	minY=pos.y;
		if(pos.y>maxY)	maxY=pos.y;
		if(pos.x<minX)	minX=pos.x;
		if(pos.x>maxX)	maxX=pos.x;
	}

	/**
	 * Erstellt einen Hash-Wert für die gegebene Position
	 */
	private String generateHashValue(Position pos){
		return "" + pos.y + "," + pos.x;
	}

    @Override
    public String toString(){
    	return toString(null);
    }

    /**
     * Erstellt eine textuelle Repräsentation der Karte
     * @param hamsterPosition Die aktuelle Position des Hamsters
	 * @author Jan Bader
	 */
    public String toString(Position hamsterPosition){
    	String ret = "Karte:\n";
    	for(int y=minY;y<=maxY;y++){
    		for(int x=minX;x<=maxX;x++){
    			Feld f = getFeld(new Position(x,y));
    			if(hamsterPosition!=null && x==hamsterPosition.x && y==hamsterPosition.y) {
    				ret += "h";
    			} else {
    				//ret += f.getKornChance() + "|";
    				ret += ((f==null) ? "?" : (f.getMauer() >= 1) ? "x" : "_");
    			}
    		}
    		ret += "\n";
    	}
    	return ret;
    }

	public int getMinX(){
		return minX;
	}

	public int getMaxX(){
		return maxX;
	}

	public int getMinY(){
		return minY;
	}

	public int getMaxY(){
		return maxY;
	}

	/**
	 * Räumt die Karte auf. D.h. sperrt nicht mehr benötigte Felder.
	 * @author Jan Bader
	 */
	public boolean cleanMap(Position start) {
		boolean hasCleaned = false;
		for(int x=minX+1; x<maxX-1; x++) {
			for(int y=minY+1; y<maxY-1; y++) {
				Position pos = new Position(x, y);
				if(pos.x==start.x && pos.y==start.y)
					continue;
				if(getMauer(pos)!=1 && !isNeededSpace(x, y)) {
					this.setMauer(pos, 1.0);
					hasCleaned = true;
				}
			}
		}
		return hasCleaned;
	}

	public boolean feldBelegtInRichtung(int x, int y, int r) {
		return feldBelegt(new Position(x, y).getPositionInRichtung(r));
	}

	/**
	 * Prüft, ob auf ein Feld verzichtet werden kann
	 * @author Jan Bader
	 */
	private boolean isNeededSpace(int x, int y) {
		Position pos = new Position(x, y);
		if(getKornChance(pos)>0) {
			return true;
		}
		if(!feldBelegtInRichtung(x, y, 0) || !feldBelegtInRichtung(x, y, 1) || !feldBelegtInRichtung(x, y, 2) || !feldBelegtInRichtung(x, y, 3)) {
			return true;
		}
		boolean left   = getMauer(pos.getPositionInRichtung(3)) == 1;
		boolean top    = getMauer(pos.getPositionInRichtung(0)) == 1;
		boolean right  = getMauer(pos.getPositionInRichtung(1)) == 1;
		boolean bottom = getMauer(pos.getPositionInRichtung(2)) == 1;
		if(		left &&  top && !right && !bottom
			|| !left &&  top &&  right && !bottom
			|| !left && !top &&  right &&  bottom
			||  left && !top && !right &&  bottom)
			return false;
		return true;
	}
}



