/*class*/
/**
 * Ein Hamster mit zusÃ¤tzlichen FunktionalitÃ¤ten und begrenzter Energie.
 * Verbraucht fÃ¼r jede Drehung und jede Bewegung auf eine andere Kachel Energie.
 * Kann sich nur so lange bewegen, wie Energie vorhanden.
 */
public class MeinHamster extends Hamster {
    private Position startPosition;
	private Position position;
	private Karte karte;
	private int energieLevel;
    private Wegfindung ki;

	/**
	  * Konstruktor der Klasse MeinHamster
	  * @param y die Reihe des Territoriums, in der der Hamster erzeugt wird
	  * @param x die Spalte des Territoriums, in der der Hamster erzeugt wird
	  * @param blickrichtung die Richtung, in der der Hamster anfangs schaut
	  * @param koerner die Anzahl an Koernern, die der Hamster anfangs im Maul hat
	  * @param wegfindung Objekt der Klasse Wegfindung, welches mit der Karte initialisiert wird
	  */
    public MeinHamster(int y, int x, int blickrichtung, int koerner, Wegfindung wegfindung){
    	super(y,x,blickrichtung,koerner);
    	energieLevel = Territorium.getAnzahlSpalten() * Territorium.getAnzahlReihen() * 5;;
   		karte = new Karte();
   		position = new Position(0,0,getDirection());
        startPosition = new Position(getSpalte(), getReihe(), getBlickrichtung());
        ki = wegfindung;
        wegfindung.initialize(this, karte);
    }

	/**
	 * Dreht den Hamster in die Ã¼bergebene Richtung. Dabei wird Energie verbraucht.
	 * @param richtung - Zahl 0-3, steht fÃ¼r die 4 Himmelsrichtungen.
	 * Sind die Parameter ungÃ¼ltig oder schaut der Hamster bereits
	 * in die gewÃ¼nschte Richtung wird keine Energie verbraucht und
	 * keine Drehung ausgefÃ¼hrt.
	 */
	public void dreheInRichtung(int richtung) throws HamsterEnergieException {
		int ausgangsRichtung = getBlickrichtung();
        if(richtung>3 || richtung < 0 || getBlickrichtung() == richtung)
			return;

		while(getBlickrichtung()!=richtung)
			linksUm();

		verbraucheEnergie();
        if(Math.abs(ausgangsRichtung-richtung)==2)verbraucheEnergie();
	}

	/**
      * Methode, welche die umliegenden Felder des Hamsters auf Mauern untersucht.
      */
    void KachelnAbfragen() {
    	for (int i = position.y-1; i <= position.y+1; i++) {
    		for (int j = position.x-1; j <= position.x+1; j++) {
    			if (mauerDa(i,j))
    				karte.setMauer(new Position(j,i), 1.0);
    			else
    				karte.setMauer(new Position(j,i), 0.0);
    		}
    	}

		if(!kornDa()) {
			karte.setKornChance(position, 0.0);
        }
        /*else {
            karte.setKornChance(position, 0.6);
            // 569 @ -
            // 526 @ 0.6
            // 496 @ 2
        }*/
        Log.write(karte.toString(position));
    }

	/**
	  * Methode prüft ob sich an Position eine Mauer befindet.
	  * @param y y-Koordinate der zu prüfenden Position
	  * @param x x-Koordinate der zu prüfenden Position
	  * @return Boolean-Wert, ob sich an Position eine Mauer befindet
	  */
    private boolean mauerDa(int y, int x){
    	y += startPosition.y;
    	x += startPosition.x;
    	return Territorium.mauerDa(y, x);
    }

	/**
	  * Methode bewegt den Hamster ein Feld in Blickrichtung.
	  */
    public void forward() throws HamsterEnergieException {
        super.vor();

        int richtung = getBlickrichtung();
        position = position.getPositionInRichtung(richtung);

        verbraucheEnergie();
    }

    @Override
    public void vor() {
        throw new RuntimeException("Invalid Method Call");
    }

	/**
	  * Methode zieht dem Hamster Energie ab
	  */
	private void verbraucheEnergie() throws HamsterEnergieException {
		if(energieLevel==0)
			throw new HamsterEnergieException();
		energieLevel--;
	}

	/**
	  * Methode liefert die Position zurück
	  * @param position Position des Hamsters
	  */
    public Position getPosition(){
    	return position;
    }

    /**
     * Bewegt den Hamster KI gesteuert einen Schritt weiter
     */
    public void kiStep() throws HamsterEnergieException {
    	// Als erstes Umgebung abfragen
    	KachelnAbfragen();
        if(kornDa())
            nimm();

    	int richtung = ki.getBestMove();
    	dreheInRichtung(richtung);
    	forward();
    }

    public int getEnergie(){
    	return energieLevel;
    }

    /**
     * Gibt zurÃ¼ck, ob in der angegebenen Richtung frei ist,
     * oder ob dort eine Mauer liegt
     * @return true, wenn in der angegebenen Richtung keine Mauer ist
     */
    private boolean freiInRichtung(int richtung) {
    	Feld feld = feldInRichtung(richtung);
    	return feld.getMauer() < 1;
    }

    /**
     * Gibt das Feld in der angegebenen Richtung zurÃ¼ck
     * @return Das Feld in der angegebenen Richtung
     */
    private Feld feldInRichtung(int richtung) {
    	return karte.getFeldInRichtung(position, richtung);
    }
}
