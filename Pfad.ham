/*class*/
import java.util.Stack;
class Pfad {
	Karte karte;
	Stack<Integer> richtungen;
	Position start;

	public Pfad(Karte karte, Position start) {
		richtungen = new Stack<Integer>();
		this.karte = karte;
		this.start = start;
	}

	public Pfad(Karte karte, Position start, int[] directions) {
		this(karte, start);
		for(int i=directions.length-1; i>=0; i--) {
			if( !richtungen.empty() &&
				(directions[i]-richtungen.peek())%2 == 0)
				break;
			addStep(directions[i]);
		}
	}

	public void addStep(int richtung) {
		richtungen.push(new Integer(richtung));
	}

	public double getRatio() {
		Stack tempRichtungen = (Stack)richtungen.clone();

		Position pos = start;
		double energie = 0;
		double kornChance = 0;

		while(!tempRichtungen.isEmpty()) {
			Integer richtung = (Integer)tempRichtungen.pop();
			pos = getPositionInRichtung(pos, richtung);

			if(richtung!=pos.direction)
				energie++;		// Drehung, wenn nötig
			energie++;			// Schritt vorwärts

			kornChance += karte.getKornChance(pos);
			if(karte.getMauer(pos)==1) {
				return -999;
			}
		}

		return (double)kornChance/energie;
	}

	public boolean isValid() {
		Stack tempRichtungen = (Stack)richtungen.clone();
		Position pos = start;
		while(!tempRichtungen.isEmpty()) {
			Integer richtung = (Integer)tempRichtungen.pop();
			pos = getPositionInRichtung(pos, richtung);
			if(karte.getMauer(pos)==1) {
				return false;
			}
		}
		return true;
	}

	public int getNextRichtung() {
		return (Integer)richtungen.peek();
	}

	public Position getPositionInRichtung(Position start, int richtung) {
		switch(richtung) {
			case 0:
				return new Position(start.x, start.y-1);
			case 1:
				return new Position(start.x+1, start.y);
			case 2:
				return new Position(start.x, start.y+1);
			case 3:
				return new Position(start.x-1, start.y);
			default:
				throw new IllegalArgumentException("Ungültige Richtungsangabe");
		}
	}
}
