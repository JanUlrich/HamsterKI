/*class*/
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
class PfadWegfindung extends Wegfindung {
	public static int maxSteps = 1;
	private static int lastSteps = 0;
	private Pfad bestPath = null;

	public List<Pfad> FindPaths(Position start, Pfad pfad, boolean first) {
		if(pfad==null)
			pfad = new Pfad(karte, start);
		List<Pfad> pfade = new ArrayList<Pfad>();

		if(pfad.length()>500) {
			pfade.add(pfad);
			return pfade;
		}

		if(pfad.length()>=maxSteps) {
			if(pfad.getKornChance()<=0 && !first)
				return pfade;
			if(pfad.getKornChance()>0 || maxSteps<5) {
				pfade.add(pfad);
				return pfade;
			}
			hamster.schreib("Pfad: " + pfad.toString() + "\nKornChance: " + pfad.getKornChance() + "\nPosition: " + start.x + ", " + start.y);
		}

		boolean fst = true;
		int s = 0;
		if(!pfad.isEmpty())
			s=pfad.peekLastRichtung();
		int d = (int) Math.random() * 2 - 1;

		for(int r=s; r<s+4 && r>s-4; r+=d) {
			int c = Math.abs(r%4);
			Position nextPos = start.getPositionInRichtung(c);
			if(karte.getMauer(nextPos)==1 || !pfad.isEmpty() && s==c-2 && s==c+2)
				continue;
			Pfad p = pfad.clone();
			p.addStep(c);

			List<Pfad> result = FindPaths(nextPos, p, fst);
			if(result.size()>0) {
				fst = false;
				pfade.addAll(result);
			}
		}

		return pfade;
	}

	public int getBestMove(){
		lastSteps = maxSteps;

		Position start = hamster.getPosition();
		while(karte.cleanMap(start)) {
			hamster.schreib(karte.toString());
		}

		double kornChance = -1;
		if(bestPath!=null && !bestPath.isEmpty() && bestPath.isValid() && maxSteps<4 && bestPath.length()>maxSteps/2) {
			return bestPath.getNextRichtung();
		}

		//while(kornChance<=0) {
			bestPath = null;
			int bestEnergie = 99999;

			List<Pfad> pfade = FindPaths(start, null, true);
			for(Pfad p : pfade) {
				double ratio = p.getKornChance();
				int energie = p.getEnergie();
				if((ratio>kornChance || (ratio>=kornChance && energie<bestEnergie))) {
					kornChance = ratio;
					bestPath = p;
					bestEnergie = energie;
				}
			}
		//	if(kornChance>0)
		//		break;

			maxSteps++;

			String debug = karte.toString(start) + "\n\n"
				+ ((bestPath!=null) ? bestPath.toString() : "NULL") + "\n\n"
				+ maxSteps + "\n\n"
				+ bestEnergie + "\n" + kornChance;
			//hamster.schreib("Vorausschau um ein Feld erh√∂ht\n" + debug);
		//}

		// Verhindert, dass Vorausschau zu schnell ansteigt
		maxSteps = maxSteps - (maxSteps - lastSteps) / 2;

		return bestPath.getNextRichtung();
	}
}