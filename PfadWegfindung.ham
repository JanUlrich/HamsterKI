/*class*/
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
class PfadWegfindung extends Wegfindung {
	public static int maxSteps = 1;
	private static int lastSteps = 0;
	private Pfad bestPath = null;

	public List<Pfad> FindPaths(Position start, Pfad pfad) {
		if(pfad==null) {
			pfad = new Pfad(karte, start);
		}

		List<Pfad> pfade = new ArrayList<Pfad>();

		if(pfad.length()==maxSteps) {
			pfade.add(pfad);
			return pfade;
		}

		for(int r=0; r<4; r++) {
			Position nextPos = start.getPositionInRichtung(r);
			if(karte.getMauer(nextPos)==1)
				continue;
			Pfad p = pfad.clone();
			p.addStep(r);
			pfade.addAll(FindPaths(nextPos, p));
		}

		return pfade;
	}

	public int getBestMove(){
		lastSteps = maxSteps;

		double kornChance = -1;
		if(bestPath!=null && !bestPath.isEmpty() && bestPath.isValid() && maxSteps<4 && bestPath.length()>maxSteps/2) {
			return bestPath.getNextRichtung();
		}

		while(kornChance<=0) {
			bestPath = null;
			Position start = hamster.getPosition();
			int bestEnergie = 99999;

			List<Pfad> pfade = FindPaths(start, null);
			for(Pfad p : pfade) {
				double ratio = p.getKornChance();
				int energie = p.getEnergie();
				if((ratio>kornChance || (ratio>=kornChance && energie<bestEnergie))) {
					kornChance = ratio;
					bestPath = p;
					bestEnergie = energie;
				}
			}
			if(kornChance>0)
				break;

			maxSteps++;

			String debug = karte.toString(start) + "\n\n"
				+ bestPath.toString() + "\n\n"
				+ maxSteps + "\n\n"
				+ bestEnergie + "\n" + kornChance;
			//hamster.schreib("Vorausschau um ein Feld erh√∂ht\n" + debug);
		}

		// Verhindert, dass Vorausschau zu schnell ansteigt
		maxSteps = maxSteps - (maxSteps - lastSteps) / 2;

		return bestPath.getNextRichtung();
	}
}