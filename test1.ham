/*object-oriented program*/
import java.util.ArrayList;

/**
  * Hauptfunktion, mit welcher ein vollständiger Testlauf durchgeführt werden kann.
  * @author Simon Herrmann
  */
void main()
{
	int gesamtAnzahlKoerner = Territorium.getAnzahlKoerner();

	//Algorithmen hinzufügen
	ArrayList<Wegfindung> algos = new ArrayList<Wegfindung>();
    algos.add(new HamsterWegfindung());
    //algos.add(new PfadWegfindung());

	//Hamster für jeden Algorithmus hinzufügen
    ArrayList<MeinHamster> hamsters = new ArrayList<MeinHamster>();
    for (Wegfindung wf : algos) {
    	Hamster standard = Hamster.getStandardHamster();
        MeinHamster hamster = new MeinHamster(standard.getReihe(), standard.getSpalte(), 0, 0, wf);
        hamsters.add(hamster);
    }

    //KI ausführen
    mainLoop(hamsters);

    //Ergebnis ausgeben
    for (int i = 0; i < hamsters.size() && gesamtAnzahlKoerner > 0; i++) {
    	int anzahl = hamsters.get(i).getAnzahlKoerner();
    	int prozent = anzahl * 100 / gesamtAnzahlKoerner;
    	int energie = hamsters.get(i).getEnergie();

    	hamsters.get(i).schreib("Hamster"+i+"\nGefundene Körner: "+ anzahl + "\nHamster"+i+" hat " + prozent + " Prozent der Körner gefunden!\nRestenergie: " + energie);
    }
}


/**
  * Die Methode läuft die KI für alle existierenden Hamster durch.
  * @param hamsters Existierende Hamster
  */
void mainLoop(ArrayList<MeinHamster> hamsters) {
    while(true) {
    	try {
            for (MeinHamster hamster : hamsters) {
    	    	hamster.kiStep();
    	    	if(Territorium.getAnzahlKoerner()==0){
                    return;
    	    	}
            }
    	} catch(HamsterEnergieException e) {
    		return;
    	}
    }
}
